import express from "express";
import core from "express-serve-static-core";
import http from "http";
import https from "https";
import { ExpressStaticGzipOptions } from "express-static-gzip";
import type { HmrOptions } from "vite";
type ViteConfig = {
    root: string;
    base: string;
    build: {
        outDir: string;
    };
    server?: {
        hmr?: boolean | HmrOptions;
    };
};
declare enum Verbosity {
    Silent = 0,
    ErrorsOnly = 1,
    Normal = 2
}
declare const Config: {
    mode: "production" | "development";
    inlineViteConfig: Partial<ViteConfig> | undefined;
    viteConfigFile: string | undefined;
    ignorePaths: undefined | RegExp | ((path: string, req: express.Request) => boolean);
    transformer: undefined | ((html: string, req: express.Request) => string | Promise<string>);
    verbosity: Verbosity;
};
type ConfigurationOptions = Partial<typeof Config>;
declare function getViteConfig(): Promise<ViteConfig>;
declare function config(config: ConfigurationOptions): void;
declare function bind(app: core.Express, server: http.Server | https.Server, callback?: () => void): Promise<void>;
declare function listen(app: core.Express, port: number, callback?: () => void): http.Server<typeof http.IncomingMessage, typeof http.ServerResponse>;
declare function build(): Promise<void>;
declare const _default: {
    config: typeof config;
    bind: typeof bind;
    listen: typeof listen;
    build: typeof build;
    static: (options?: ExpressStaticGzipOptions) => express.RequestHandler<core.ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>;
    getViteConfig: typeof getViteConfig;
    Verbosity: typeof Verbosity;
};
export = _default;
